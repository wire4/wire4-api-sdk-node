# coding: utf-8

"""
    Wire4RestAPI

    Referencia de la API de Wire4  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from wire4_client.models.account_response import AccountResponse  # noqa: F401,E501


class BeneficiariesQueryRegisterStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authorization_date': 'datetime',
        'beneficiaries': 'list[AccountResponse]',
        'request_date': 'datetime',
        'request_id': 'str',
        'status_request': 'str',
        'total_beneficiaries': 'int'
    }

    attribute_map = {
        'authorization_date': 'authorization_date',
        'beneficiaries': 'beneficiaries',
        'request_date': 'request_date',
        'request_id': 'request_id',
        'status_request': 'status_request',
        'total_beneficiaries': 'total_beneficiaries'
    }

    def __init__(self, authorization_date=None, beneficiaries=None, request_date=None, request_id=None, status_request=None, total_beneficiaries=None):  # noqa: E501
        """BeneficiariesQueryRegisterStatus - a model defined in Swagger"""  # noqa: E501
        self._authorization_date = None
        self._beneficiaries = None
        self._request_date = None
        self._request_id = None
        self._status_request = None
        self._total_beneficiaries = None
        self.discriminator = None
        if authorization_date is not None:
            self.authorization_date = authorization_date
        if beneficiaries is not None:
            self.beneficiaries = beneficiaries
        if request_date is not None:
            self.request_date = request_date
        if request_id is not None:
            self.request_id = request_id
        if status_request is not None:
            self.status_request = status_request
        if total_beneficiaries is not None:
            self.total_beneficiaries = total_beneficiaries

    @property
    def authorization_date(self):
        """Gets the authorization_date of this BeneficiariesQueryRegisterStatus.  # noqa: E501

        Fecha en que el usuario propietario del token autorizo el registro de beneficiarios  # noqa: E501

        :return: The authorization_date of this BeneficiariesQueryRegisterStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._authorization_date

    @authorization_date.setter
    def authorization_date(self, authorization_date):
        """Sets the authorization_date of this BeneficiariesQueryRegisterStatus.

        Fecha en que el usuario propietario del token autorizo el registro de beneficiarios  # noqa: E501

        :param authorization_date: The authorization_date of this BeneficiariesQueryRegisterStatus.  # noqa: E501
        :type: datetime
        """

        self._authorization_date = authorization_date

    @property
    def beneficiaries(self):
        """Gets the beneficiaries of this BeneficiariesQueryRegisterStatus.  # noqa: E501

        Es una lista de beneficiarios obtenidos.  # noqa: E501

        :return: The beneficiaries of this BeneficiariesQueryRegisterStatus.  # noqa: E501
        :rtype: list[AccountResponse]
        """
        return self._beneficiaries

    @beneficiaries.setter
    def beneficiaries(self, beneficiaries):
        """Sets the beneficiaries of this BeneficiariesQueryRegisterStatus.

        Es una lista de beneficiarios obtenidos.  # noqa: E501

        :param beneficiaries: The beneficiaries of this BeneficiariesQueryRegisterStatus.  # noqa: E501
        :type: list[AccountResponse]
        """

        self._beneficiaries = beneficiaries

    @property
    def request_date(self):
        """Gets the request_date of this BeneficiariesQueryRegisterStatus.  # noqa: E501

        Fecha en que se realizó la petición de registro de beneficiarios,   # noqa: E501

        :return: The request_date of this BeneficiariesQueryRegisterStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._request_date

    @request_date.setter
    def request_date(self, request_date):
        """Sets the request_date of this BeneficiariesQueryRegisterStatus.

        Fecha en que se realizó la petición de registro de beneficiarios,   # noqa: E501

        :param request_date: The request_date of this BeneficiariesQueryRegisterStatus.  # noqa: E501
        :type: datetime
        """

        self._request_date = request_date

    @property
    def request_id(self):
        """Gets the request_id of this BeneficiariesQueryRegisterStatus.  # noqa: E501

        Identificador de la petición del registro de beneficiarios  # noqa: E501

        :return: The request_id of this BeneficiariesQueryRegisterStatus.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this BeneficiariesQueryRegisterStatus.

        Identificador de la petición del registro de beneficiarios  # noqa: E501

        :param request_id: The request_id of this BeneficiariesQueryRegisterStatus.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def status_request(self):
        """Gets the status_request of this BeneficiariesQueryRegisterStatus.  # noqa: E501

        Indica sí la petición ya fue autorizada usando el token del usuario  # noqa: E501

        :return: The status_request of this BeneficiariesQueryRegisterStatus.  # noqa: E501
        :rtype: str
        """
        return self._status_request

    @status_request.setter
    def status_request(self, status_request):
        """Sets the status_request of this BeneficiariesQueryRegisterStatus.

        Indica sí la petición ya fue autorizada usando el token del usuario  # noqa: E501

        :param status_request: The status_request of this BeneficiariesQueryRegisterStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["PENDING", "AUTHORIZED"]  # noqa: E501
        if status_request not in allowed_values:
            raise ValueError(
                "Invalid value for `status_request` ({0}), must be one of {1}"  # noqa: E501
                .format(status_request, allowed_values)
            )

        self._status_request = status_request

    @property
    def total_beneficiaries(self):
        """Gets the total_beneficiaries of this BeneficiariesQueryRegisterStatus.  # noqa: E501

        Total de beneficiarios enviados en la petición  # noqa: E501

        :return: The total_beneficiaries of this BeneficiariesQueryRegisterStatus.  # noqa: E501
        :rtype: int
        """
        return self._total_beneficiaries

    @total_beneficiaries.setter
    def total_beneficiaries(self, total_beneficiaries):
        """Sets the total_beneficiaries of this BeneficiariesQueryRegisterStatus.

        Total de beneficiarios enviados en la petición  # noqa: E501

        :param total_beneficiaries: The total_beneficiaries of this BeneficiariesQueryRegisterStatus.  # noqa: E501
        :type: int
        """

        self._total_beneficiaries = total_beneficiaries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BeneficiariesQueryRegisterStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BeneficiariesQueryRegisterStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
