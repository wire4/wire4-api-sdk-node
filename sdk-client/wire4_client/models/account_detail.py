# coding: utf-8

"""
    Wire4RestAPI

    Referencia de la API de Wire4  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from wire4_client.models.address_company import AddressCompany  # noqa: F401,E501


class AccountDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'AddressCompany',
        'business_name': 'str',
        'constitution_date': 'str',
        'emails': 'list[str]',
        'legal_representatives': 'list[str]',
        'rfc': 'str'
    }

    attribute_map = {
        'address': 'address',
        'business_name': 'business_name',
        'constitution_date': 'constitution_date',
        'emails': 'emails',
        'legal_representatives': 'legal_representatives',
        'rfc': 'rfc'
    }

    def __init__(self, address=None, business_name=None, constitution_date=None, emails=None, legal_representatives=None, rfc=None):  # noqa: E501
        """AccountDetail - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._business_name = None
        self._constitution_date = None
        self._emails = None
        self._legal_representatives = None
        self._rfc = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if business_name is not None:
            self.business_name = business_name
        if constitution_date is not None:
            self.constitution_date = constitution_date
        if emails is not None:
            self.emails = emails
        if legal_representatives is not None:
            self.legal_representatives = legal_representatives
        if rfc is not None:
            self.rfc = rfc

    @property
    def address(self):
        """Gets the address of this AccountDetail.  # noqa: E501


        :return: The address of this AccountDetail.  # noqa: E501
        :rtype: AddressCompany
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AccountDetail.


        :param address: The address of this AccountDetail.  # noqa: E501
        :type: AddressCompany
        """

        self._address = address

    @property
    def business_name(self):
        """Gets the business_name of this AccountDetail.  # noqa: E501

        El nombre del negocio  # noqa: E501

        :return: The business_name of this AccountDetail.  # noqa: E501
        :rtype: str
        """
        return self._business_name

    @business_name.setter
    def business_name(self, business_name):
        """Sets the business_name of this AccountDetail.

        El nombre del negocio  # noqa: E501

        :param business_name: The business_name of this AccountDetail.  # noqa: E501
        :type: str
        """

        self._business_name = business_name

    @property
    def constitution_date(self):
        """Gets the constitution_date of this AccountDetail.  # noqa: E501

        La fecha de constitución del negocio  # noqa: E501

        :return: The constitution_date of this AccountDetail.  # noqa: E501
        :rtype: str
        """
        return self._constitution_date

    @constitution_date.setter
    def constitution_date(self, constitution_date):
        """Sets the constitution_date of this AccountDetail.

        La fecha de constitución del negocio  # noqa: E501

        :param constitution_date: The constitution_date of this AccountDetail.  # noqa: E501
        :type: str
        """

        self._constitution_date = constitution_date

    @property
    def emails(self):
        """Gets the emails of this AccountDetail.  # noqa: E501

        La lista de correos del negocio  # noqa: E501

        :return: The emails of this AccountDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this AccountDetail.

        La lista de correos del negocio  # noqa: E501

        :param emails: The emails of this AccountDetail.  # noqa: E501
        :type: list[str]
        """

        self._emails = emails

    @property
    def legal_representatives(self):
        """Gets the legal_representatives of this AccountDetail.  # noqa: E501

        La lista de los representantes legales negocio  # noqa: E501

        :return: The legal_representatives of this AccountDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._legal_representatives

    @legal_representatives.setter
    def legal_representatives(self, legal_representatives):
        """Sets the legal_representatives of this AccountDetail.

        La lista de los representantes legales negocio  # noqa: E501

        :param legal_representatives: The legal_representatives of this AccountDetail.  # noqa: E501
        :type: list[str]
        """

        self._legal_representatives = legal_representatives

    @property
    def rfc(self):
        """Gets the rfc of this AccountDetail.  # noqa: E501

        El RFC del negocio  # noqa: E501

        :return: The rfc of this AccountDetail.  # noqa: E501
        :rtype: str
        """
        return self._rfc

    @rfc.setter
    def rfc(self, rfc):
        """Sets the rfc of this AccountDetail.

        El RFC del negocio  # noqa: E501

        :param rfc: The rfc of this AccountDetail.  # noqa: E501
        :type: str
        """

        self._rfc = rfc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
