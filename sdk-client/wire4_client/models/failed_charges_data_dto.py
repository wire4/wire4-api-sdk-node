# coding: utf-8

"""
    Wire4RestAPI

    Referencia de la API de Wire4  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FailedChargesDataDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'brand': 'str',
        'card_number': 'str',
        '_date': 'str',
        'error_code': 'str',
        'error_message': 'str',
        'holder_name': 'str'
    }

    attribute_map = {
        'brand': 'brand',
        'card_number': 'card_number',
        '_date': 'date',
        'error_code': 'error_code',
        'error_message': 'error_message',
        'holder_name': 'holder_name'
    }

    def __init__(self, brand=None, card_number=None, _date=None, error_code=None, error_message=None, holder_name=None):  # noqa: E501
        """FailedChargesDataDTO - a model defined in Swagger"""  # noqa: E501
        self._brand = None
        self._card_number = None
        self.__date = None
        self._error_code = None
        self._error_message = None
        self._holder_name = None
        self.discriminator = None
        if brand is not None:
            self.brand = brand
        if card_number is not None:
            self.card_number = card_number
        if _date is not None:
            self._date = _date
        if error_code is not None:
            self.error_code = error_code
        if error_message is not None:
            self.error_message = error_message
        if holder_name is not None:
            self.holder_name = holder_name

    @property
    def brand(self):
        """Gets the brand of this FailedChargesDataDTO.  # noqa: E501


        :return: The brand of this FailedChargesDataDTO.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this FailedChargesDataDTO.


        :param brand: The brand of this FailedChargesDataDTO.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def card_number(self):
        """Gets the card_number of this FailedChargesDataDTO.  # noqa: E501


        :return: The card_number of this FailedChargesDataDTO.  # noqa: E501
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this FailedChargesDataDTO.


        :param card_number: The card_number of this FailedChargesDataDTO.  # noqa: E501
        :type: str
        """

        self._card_number = card_number

    @property
    def _date(self):
        """Gets the _date of this FailedChargesDataDTO.  # noqa: E501


        :return: The _date of this FailedChargesDataDTO.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this FailedChargesDataDTO.


        :param _date: The _date of this FailedChargesDataDTO.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def error_code(self):
        """Gets the error_code of this FailedChargesDataDTO.  # noqa: E501


        :return: The error_code of this FailedChargesDataDTO.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this FailedChargesDataDTO.


        :param error_code: The error_code of this FailedChargesDataDTO.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this FailedChargesDataDTO.  # noqa: E501


        :return: The error_message of this FailedChargesDataDTO.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this FailedChargesDataDTO.


        :param error_message: The error_message of this FailedChargesDataDTO.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def holder_name(self):
        """Gets the holder_name of this FailedChargesDataDTO.  # noqa: E501


        :return: The holder_name of this FailedChargesDataDTO.  # noqa: E501
        :rtype: str
        """
        return self._holder_name

    @holder_name.setter
    def holder_name(self, holder_name):
        """Sets the holder_name of this FailedChargesDataDTO.


        :param holder_name: The holder_name of this FailedChargesDataDTO.  # noqa: E501
        :type: str
        """

        self._holder_name = holder_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FailedChargesDataDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FailedChargesDataDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
