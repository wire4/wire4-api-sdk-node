# coding: utf-8

"""
    Wire4RestAPI

    Referencia de la API de Wire4  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CertificateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alias': 'str',
        'certificate_number': 'str',
        'check_digit': 'str',
        'cipher_data': 'str'
    }

    attribute_map = {
        'alias': 'alias',
        'certificate_number': 'certificate_number',
        'check_digit': 'check_digit',
        'cipher_data': 'cipher_data'
    }

    def __init__(self, alias=None, certificate_number=None, check_digit=None, cipher_data=None):  # noqa: E501
        """CertificateRequest - a model defined in Swagger"""  # noqa: E501
        self._alias = None
        self._certificate_number = None
        self._check_digit = None
        self._cipher_data = None
        self.discriminator = None
        if alias is not None:
            self.alias = alias
        if certificate_number is not None:
            self.certificate_number = certificate_number
        if check_digit is not None:
            self.check_digit = check_digit
        if cipher_data is not None:
            self.cipher_data = cipher_data

    @property
    def alias(self):
        """Gets the alias of this CertificateRequest.  # noqa: E501

        Es el alias del certificado.  # noqa: E501

        :return: The alias of this CertificateRequest.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this CertificateRequest.

        Es el alias del certificado.  # noqa: E501

        :param alias: The alias of this CertificateRequest.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def certificate_number(self):
        """Gets the certificate_number of this CertificateRequest.  # noqa: E501

        Es el número de certificado.  # noqa: E501

        :return: The certificate_number of this CertificateRequest.  # noqa: E501
        :rtype: str
        """
        return self._certificate_number

    @certificate_number.setter
    def certificate_number(self, certificate_number):
        """Sets the certificate_number of this CertificateRequest.

        Es el número de certificado.  # noqa: E501

        :param certificate_number: The certificate_number of this CertificateRequest.  # noqa: E501
        :type: str
        """

        self._certificate_number = certificate_number

    @property
    def check_digit(self):
        """Gets the check_digit of this CertificateRequest.  # noqa: E501

        Es el dígito verificador. Es un sólo dígito.  # noqa: E501

        :return: The check_digit of this CertificateRequest.  # noqa: E501
        :rtype: str
        """
        return self._check_digit

    @check_digit.setter
    def check_digit(self, check_digit):
        """Sets the check_digit of this CertificateRequest.

        Es el dígito verificador. Es un sólo dígito.  # noqa: E501

        :param check_digit: The check_digit of this CertificateRequest.  # noqa: E501
        :type: str
        """

        self._check_digit = check_digit

    @property
    def cipher_data(self):
        """Gets the cipher_data of this CertificateRequest.  # noqa: E501

        Es la información de cifrado.  # noqa: E501

        :return: The cipher_data of this CertificateRequest.  # noqa: E501
        :rtype: str
        """
        return self._cipher_data

    @cipher_data.setter
    def cipher_data(self, cipher_data):
        """Sets the cipher_data of this CertificateRequest.

        Es la información de cifrado.  # noqa: E501

        :param cipher_data: The cipher_data of this CertificateRequest.  # noqa: E501
        :type: str
        """

        self._cipher_data = cipher_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
