# coding: utf-8

"""
    Wire4RestAPI

    Referencia de la API de Wire4  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CodiOperationsFiltersRequestDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount_from': 'float',
        'amount_to': 'float',
        'operation_date_from': 'date',
        'operation_date_to': 'date',
        'order_id': 'str',
        'request_date_from': 'date',
        'request_date_to': 'date',
        'status': 'str'
    }

    attribute_map = {
        'amount_from': 'amount_from',
        'amount_to': 'amount_to',
        'operation_date_from': 'operation_date_from',
        'operation_date_to': 'operation_date_to',
        'order_id': 'order_id',
        'request_date_from': 'request_date_from',
        'request_date_to': 'request_date_to',
        'status': 'status'
    }

    def __init__(self, amount_from=None, amount_to=None, operation_date_from=None, operation_date_to=None, order_id=None, request_date_from=None, request_date_to=None, status=None):  # noqa: E501
        """CodiOperationsFiltersRequestDTO - a model defined in Swagger"""  # noqa: E501
        self._amount_from = None
        self._amount_to = None
        self._operation_date_from = None
        self._operation_date_to = None
        self._order_id = None
        self._request_date_from = None
        self._request_date_to = None
        self._status = None
        self.discriminator = None
        if amount_from is not None:
            self.amount_from = amount_from
        if amount_to is not None:
            self.amount_to = amount_to
        if operation_date_from is not None:
            self.operation_date_from = operation_date_from
        if operation_date_to is not None:
            self.operation_date_to = operation_date_to
        if order_id is not None:
            self.order_id = order_id
        if request_date_from is not None:
            self.request_date_from = request_date_from
        if request_date_to is not None:
            self.request_date_to = request_date_to
        if status is not None:
            self.status = status

    @property
    def amount_from(self):
        """Gets the amount_from of this CodiOperationsFiltersRequestDTO.  # noqa: E501

        Es el monto minimo. Se permiten dos decimales. Ejemplo 1000.00  # noqa: E501

        :return: The amount_from of this CodiOperationsFiltersRequestDTO.  # noqa: E501
        :rtype: float
        """
        return self._amount_from

    @amount_from.setter
    def amount_from(self, amount_from):
        """Sets the amount_from of this CodiOperationsFiltersRequestDTO.

        Es el monto minimo. Se permiten dos decimales. Ejemplo 1000.00  # noqa: E501

        :param amount_from: The amount_from of this CodiOperationsFiltersRequestDTO.  # noqa: E501
        :type: float
        """

        self._amount_from = amount_from

    @property
    def amount_to(self):
        """Gets the amount_to of this CodiOperationsFiltersRequestDTO.  # noqa: E501

        Es el monto máximo. Se permiten dos decimales. Ejemplo 1000.00  # noqa: E501

        :return: The amount_to of this CodiOperationsFiltersRequestDTO.  # noqa: E501
        :rtype: float
        """
        return self._amount_to

    @amount_to.setter
    def amount_to(self, amount_to):
        """Sets the amount_to of this CodiOperationsFiltersRequestDTO.

        Es el monto máximo. Se permiten dos decimales. Ejemplo 1000.00  # noqa: E501

        :param amount_to: The amount_to of this CodiOperationsFiltersRequestDTO.  # noqa: E501
        :type: float
        """

        self._amount_to = amount_to

    @property
    def operation_date_from(self):
        """Gets the operation_date_from of this CodiOperationsFiltersRequestDTO.  # noqa: E501

        Es el filtro de fecha de operación \"desde\".  # noqa: E501

        :return: The operation_date_from of this CodiOperationsFiltersRequestDTO.  # noqa: E501
        :rtype: date
        """
        return self._operation_date_from

    @operation_date_from.setter
    def operation_date_from(self, operation_date_from):
        """Sets the operation_date_from of this CodiOperationsFiltersRequestDTO.

        Es el filtro de fecha de operación \"desde\".  # noqa: E501

        :param operation_date_from: The operation_date_from of this CodiOperationsFiltersRequestDTO.  # noqa: E501
        :type: date
        """

        self._operation_date_from = operation_date_from

    @property
    def operation_date_to(self):
        """Gets the operation_date_to of this CodiOperationsFiltersRequestDTO.  # noqa: E501

        Es el filtro de fecha de operación \"hasta\".  # noqa: E501

        :return: The operation_date_to of this CodiOperationsFiltersRequestDTO.  # noqa: E501
        :rtype: date
        """
        return self._operation_date_to

    @operation_date_to.setter
    def operation_date_to(self, operation_date_to):
        """Sets the operation_date_to of this CodiOperationsFiltersRequestDTO.

        Es el filtro de fecha de operación \"hasta\".  # noqa: E501

        :param operation_date_to: The operation_date_to of this CodiOperationsFiltersRequestDTO.  # noqa: E501
        :type: date
        """

        self._operation_date_to = operation_date_to

    @property
    def order_id(self):
        """Gets the order_id of this CodiOperationsFiltersRequestDTO.  # noqa: E501

        Es el order id de la petición.  # noqa: E501

        :return: The order_id of this CodiOperationsFiltersRequestDTO.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this CodiOperationsFiltersRequestDTO.

        Es el order id de la petición.  # noqa: E501

        :param order_id: The order_id of this CodiOperationsFiltersRequestDTO.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def request_date_from(self):
        """Gets the request_date_from of this CodiOperationsFiltersRequestDTO.  # noqa: E501

        Es el filtro de fecha de petición \"desde\".  # noqa: E501

        :return: The request_date_from of this CodiOperationsFiltersRequestDTO.  # noqa: E501
        :rtype: date
        """
        return self._request_date_from

    @request_date_from.setter
    def request_date_from(self, request_date_from):
        """Sets the request_date_from of this CodiOperationsFiltersRequestDTO.

        Es el filtro de fecha de petición \"desde\".  # noqa: E501

        :param request_date_from: The request_date_from of this CodiOperationsFiltersRequestDTO.  # noqa: E501
        :type: date
        """

        self._request_date_from = request_date_from

    @property
    def request_date_to(self):
        """Gets the request_date_to of this CodiOperationsFiltersRequestDTO.  # noqa: E501

        Es el filtro de fecha de petición \"hasta\".  # noqa: E501

        :return: The request_date_to of this CodiOperationsFiltersRequestDTO.  # noqa: E501
        :rtype: date
        """
        return self._request_date_to

    @request_date_to.setter
    def request_date_to(self, request_date_to):
        """Sets the request_date_to of this CodiOperationsFiltersRequestDTO.

        Es el filtro de fecha de petición \"hasta\".  # noqa: E501

        :param request_date_to: The request_date_to of this CodiOperationsFiltersRequestDTO.  # noqa: E501
        :type: date
        """

        self._request_date_to = request_date_to

    @property
    def status(self):
        """Gets the status of this CodiOperationsFiltersRequestDTO.  # noqa: E501

        Es el estado (estatus) de la petición.  # noqa: E501

        :return: The status of this CodiOperationsFiltersRequestDTO.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CodiOperationsFiltersRequestDTO.

        Es el estado (estatus) de la petición.  # noqa: E501

        :param status: The status of this CodiOperationsFiltersRequestDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["RECEIVED", "COMPLETED", "CANCELLED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodiOperationsFiltersRequestDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodiOperationsFiltersRequestDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
