# coding: utf-8

"""
    Wire4RestAPI

    Referencia de la API de Wire4  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from wire4_client.models.certificate_request import CertificateRequest  # noqa: F401,E501


class CompanyRequested(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'business_name': 'str',
        'certificate': 'CertificateRequest',
        'comercial_name': 'str',
        'rfc': 'str'
    }

    attribute_map = {
        'business_name': 'business_name',
        'certificate': 'certificate',
        'comercial_name': 'comercial_name',
        'rfc': 'rfc'
    }

    def __init__(self, business_name=None, certificate=None, comercial_name=None, rfc=None):  # noqa: E501
        """CompanyRequested - a model defined in Swagger"""  # noqa: E501
        self._business_name = None
        self._certificate = None
        self._comercial_name = None
        self._rfc = None
        self.discriminator = None
        if business_name is not None:
            self.business_name = business_name
        if certificate is not None:
            self.certificate = certificate
        if comercial_name is not None:
            self.comercial_name = comercial_name
        if rfc is not None:
            self.rfc = rfc

    @property
    def business_name(self):
        """Gets the business_name of this CompanyRequested.  # noqa: E501

        Es el nombre de la empresa que se va a registrar.  # noqa: E501

        :return: The business_name of this CompanyRequested.  # noqa: E501
        :rtype: str
        """
        return self._business_name

    @business_name.setter
    def business_name(self, business_name):
        """Sets the business_name of this CompanyRequested.

        Es el nombre de la empresa que se va a registrar.  # noqa: E501

        :param business_name: The business_name of this CompanyRequested.  # noqa: E501
        :type: str
        """

        self._business_name = business_name

    @property
    def certificate(self):
        """Gets the certificate of this CompanyRequested.  # noqa: E501


        :return: The certificate of this CompanyRequested.  # noqa: E501
        :rtype: CertificateRequest
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this CompanyRequested.


        :param certificate: The certificate of this CompanyRequested.  # noqa: E501
        :type: CertificateRequest
        """

        self._certificate = certificate

    @property
    def comercial_name(self):
        """Gets the comercial_name of this CompanyRequested.  # noqa: E501

        Es el nombre comercial de la empresa que se va a registrar.  # noqa: E501

        :return: The comercial_name of this CompanyRequested.  # noqa: E501
        :rtype: str
        """
        return self._comercial_name

    @comercial_name.setter
    def comercial_name(self, comercial_name):
        """Sets the comercial_name of this CompanyRequested.

        Es el nombre comercial de la empresa que se va a registrar.  # noqa: E501

        :param comercial_name: The comercial_name of this CompanyRequested.  # noqa: E501
        :type: str
        """

        self._comercial_name = comercial_name

    @property
    def rfc(self):
        """Gets the rfc of this CompanyRequested.  # noqa: E501

        Es el Registro Federal de Contribuyentes (RFC) de la empresa que se va a registrar.  # noqa: E501

        :return: The rfc of this CompanyRequested.  # noqa: E501
        :rtype: str
        """
        return self._rfc

    @rfc.setter
    def rfc(self, rfc):
        """Sets the rfc of this CompanyRequested.

        Es el Registro Federal de Contribuyentes (RFC) de la empresa que se va a registrar.  # noqa: E501

        :param rfc: The rfc of this CompanyRequested.  # noqa: E501
        :type: str
        """

        self._rfc = rfc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompanyRequested, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyRequested):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
