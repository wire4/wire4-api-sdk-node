# coding: utf-8

"""
    Wire4RestAPI

    Referencia de la API de Wire4  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ContactRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'company': 'str',
        'contact_person': 'str',
        'email': 'str',
        'phone_number': 'str'
    }

    attribute_map = {
        'address': 'address',
        'company': 'company',
        'contact_person': 'contact_person',
        'email': 'email',
        'phone_number': 'phone_number'
    }

    def __init__(self, address=None, company=None, contact_person=None, email=None, phone_number=None):  # noqa: E501
        """ContactRequest - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._company = None
        self._contact_person = None
        self._email = None
        self._phone_number = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if company is not None:
            self.company = company
        if contact_person is not None:
            self.contact_person = contact_person
        self.email = email
        self.phone_number = phone_number

    @property
    def address(self):
        """Gets the address of this ContactRequest.  # noqa: E501

        Es la dirección del contacto, por ejemplo: Calle fulanita No. 500 int 2, Col. Conocida.  # noqa: E501

        :return: The address of this ContactRequest.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ContactRequest.

        Es la dirección del contacto, por ejemplo: Calle fulanita No. 500 int 2, Col. Conocida.  # noqa: E501

        :param address: The address of this ContactRequest.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def company(self):
        """Gets the company of this ContactRequest.  # noqa: E501

        Es el nombre de la empresa.  # noqa: E501

        :return: The company of this ContactRequest.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this ContactRequest.

        Es el nombre de la empresa.  # noqa: E501

        :param company: The company of this ContactRequest.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def contact_person(self):
        """Gets the contact_person of this ContactRequest.  # noqa: E501

        Es el nombre completo de la persona quién será contactada.  # noqa: E501

        :return: The contact_person of this ContactRequest.  # noqa: E501
        :rtype: str
        """
        return self._contact_person

    @contact_person.setter
    def contact_person(self, contact_person):
        """Sets the contact_person of this ContactRequest.

        Es el nombre completo de la persona quién será contactada.  # noqa: E501

        :param contact_person: The contact_person of this ContactRequest.  # noqa: E501
        :type: str
        """

        self._contact_person = contact_person

    @property
    def email(self):
        """Gets the email of this ContactRequest.  # noqa: E501

        Es el correo electrónico (email) de la persona. Se valida que tenga el formato de email, por ejemplo: correo@correo.com.  # noqa: E501

        :return: The email of this ContactRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ContactRequest.

        Es el correo electrónico (email) de la persona. Se valida que tenga el formato de email, por ejemplo: correo@correo.com.  # noqa: E501

        :param email: The email of this ContactRequest.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def phone_number(self):
        """Gets the phone_number of this ContactRequest.  # noqa: E501

        Es el número de teléfono de la persona. Se validan que sean 10 dígitos del número.  # noqa: E501

        :return: The phone_number of this ContactRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this ContactRequest.

        Es el número de teléfono de la persona. Se validan que sean 10 dígitos del número.  # noqa: E501

        :param phone_number: The phone_number of this ContactRequest.  # noqa: E501
        :type: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")  # noqa: E501

        self._phone_number = phone_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
