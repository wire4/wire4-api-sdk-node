# coding: utf-8

"""
    Wire4RestAPI

    Referencia de la API de Wire4  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class MessageCEP(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_beneficiary': 'str',
        'account_sender': 'str',
        'amount': 'float',
        'available': 'bool',
        'bank_beneficiary': 'str',
        'bank_sender': 'str',
        'beneficiary_name': 'str',
        'beneficiary_rfc': 'str',
        'cadena_original': 'str',
        'capture_date': 'datetime',
        'certificate_serial_number': 'str',
        'clave_rastreo': 'str',
        'description': 'str',
        'iva': 'float',
        'operation_date': 'datetime',
        'operation_date_cep': 'datetime',
        'reference': 'str',
        'sender_name': 'str',
        'sender_rfc': 'str',
        'signature': 'str',
        'url_zip': 'str'
    }

    attribute_map = {
        'account_beneficiary': 'account_beneficiary',
        'account_sender': 'account_sender',
        'amount': 'amount',
        'available': 'available',
        'bank_beneficiary': 'bank_beneficiary',
        'bank_sender': 'bank_sender',
        'beneficiary_name': 'beneficiary_name',
        'beneficiary_rfc': 'beneficiary_rfc',
        'cadena_original': 'cadena_original',
        'capture_date': 'capture_date',
        'certificate_serial_number': 'certificate_serial_number',
        'clave_rastreo': 'clave_rastreo',
        'description': 'description',
        'iva': 'iva',
        'operation_date': 'operation_date',
        'operation_date_cep': 'operation_date_cep',
        'reference': 'reference',
        'sender_name': 'sender_name',
        'sender_rfc': 'sender_rfc',
        'signature': 'signature',
        'url_zip': 'url_zip'
    }

    def __init__(self, account_beneficiary=None, account_sender=None, amount=None, available=None, bank_beneficiary=None, bank_sender=None, beneficiary_name=None, beneficiary_rfc=None, cadena_original=None, capture_date=None, certificate_serial_number=None, clave_rastreo=None, description=None, iva=None, operation_date=None, operation_date_cep=None, reference=None, sender_name=None, sender_rfc=None, signature=None, url_zip=None):  # noqa: E501
        """MessageCEP - a model defined in Swagger"""  # noqa: E501
        self._account_beneficiary = None
        self._account_sender = None
        self._amount = None
        self._available = None
        self._bank_beneficiary = None
        self._bank_sender = None
        self._beneficiary_name = None
        self._beneficiary_rfc = None
        self._cadena_original = None
        self._capture_date = None
        self._certificate_serial_number = None
        self._clave_rastreo = None
        self._description = None
        self._iva = None
        self._operation_date = None
        self._operation_date_cep = None
        self._reference = None
        self._sender_name = None
        self._sender_rfc = None
        self._signature = None
        self._url_zip = None
        self.discriminator = None
        if account_beneficiary is not None:
            self.account_beneficiary = account_beneficiary
        if account_sender is not None:
            self.account_sender = account_sender
        if amount is not None:
            self.amount = amount
        if available is not None:
            self.available = available
        if bank_beneficiary is not None:
            self.bank_beneficiary = bank_beneficiary
        if bank_sender is not None:
            self.bank_sender = bank_sender
        if beneficiary_name is not None:
            self.beneficiary_name = beneficiary_name
        if beneficiary_rfc is not None:
            self.beneficiary_rfc = beneficiary_rfc
        if cadena_original is not None:
            self.cadena_original = cadena_original
        if capture_date is not None:
            self.capture_date = capture_date
        if certificate_serial_number is not None:
            self.certificate_serial_number = certificate_serial_number
        if clave_rastreo is not None:
            self.clave_rastreo = clave_rastreo
        if description is not None:
            self.description = description
        if iva is not None:
            self.iva = iva
        if operation_date is not None:
            self.operation_date = operation_date
        if operation_date_cep is not None:
            self.operation_date_cep = operation_date_cep
        if reference is not None:
            self.reference = reference
        if sender_name is not None:
            self.sender_name = sender_name
        if sender_rfc is not None:
            self.sender_rfc = sender_rfc
        if signature is not None:
            self.signature = signature
        if url_zip is not None:
            self.url_zip = url_zip

    @property
    def account_beneficiary(self):
        """Gets the account_beneficiary of this MessageCEP.  # noqa: E501

        Es la cuenta del beneficiario.  # noqa: E501

        :return: The account_beneficiary of this MessageCEP.  # noqa: E501
        :rtype: str
        """
        return self._account_beneficiary

    @account_beneficiary.setter
    def account_beneficiary(self, account_beneficiary):
        """Sets the account_beneficiary of this MessageCEP.

        Es la cuenta del beneficiario.  # noqa: E501

        :param account_beneficiary: The account_beneficiary of this MessageCEP.  # noqa: E501
        :type: str
        """

        self._account_beneficiary = account_beneficiary

    @property
    def account_sender(self):
        """Gets the account_sender of this MessageCEP.  # noqa: E501

        Es la cuenta que envía la operación.  # noqa: E501

        :return: The account_sender of this MessageCEP.  # noqa: E501
        :rtype: str
        """
        return self._account_sender

    @account_sender.setter
    def account_sender(self, account_sender):
        """Sets the account_sender of this MessageCEP.

        Es la cuenta que envía la operación.  # noqa: E501

        :param account_sender: The account_sender of this MessageCEP.  # noqa: E501
        :type: str
        """

        self._account_sender = account_sender

    @property
    def amount(self):
        """Gets the amount of this MessageCEP.  # noqa: E501

        Es el monto de la operación.  # noqa: E501

        :return: The amount of this MessageCEP.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this MessageCEP.

        Es el monto de la operación.  # noqa: E501

        :param amount: The amount of this MessageCEP.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def available(self):
        """Gets the available of this MessageCEP.  # noqa: E501

        Indica sí el CEP está disponible.  # noqa: E501

        :return: The available of this MessageCEP.  # noqa: E501
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this MessageCEP.

        Indica sí el CEP está disponible.  # noqa: E501

        :param available: The available of this MessageCEP.  # noqa: E501
        :type: bool
        """

        self._available = available

    @property
    def bank_beneficiary(self):
        """Gets the bank_beneficiary of this MessageCEP.  # noqa: E501

        Es la clave del banco beneficiario.  # noqa: E501

        :return: The bank_beneficiary of this MessageCEP.  # noqa: E501
        :rtype: str
        """
        return self._bank_beneficiary

    @bank_beneficiary.setter
    def bank_beneficiary(self, bank_beneficiary):
        """Sets the bank_beneficiary of this MessageCEP.

        Es la clave del banco beneficiario.  # noqa: E501

        :param bank_beneficiary: The bank_beneficiary of this MessageCEP.  # noqa: E501
        :type: str
        """

        self._bank_beneficiary = bank_beneficiary

    @property
    def bank_sender(self):
        """Gets the bank_sender of this MessageCEP.  # noqa: E501

        Es la clave del banco que envía la operación.  # noqa: E501

        :return: The bank_sender of this MessageCEP.  # noqa: E501
        :rtype: str
        """
        return self._bank_sender

    @bank_sender.setter
    def bank_sender(self, bank_sender):
        """Sets the bank_sender of this MessageCEP.

        Es la clave del banco que envía la operación.  # noqa: E501

        :param bank_sender: The bank_sender of this MessageCEP.  # noqa: E501
        :type: str
        """

        self._bank_sender = bank_sender

    @property
    def beneficiary_name(self):
        """Gets the beneficiary_name of this MessageCEP.  # noqa: E501

        Es el nombre del beneficiario.  # noqa: E501

        :return: The beneficiary_name of this MessageCEP.  # noqa: E501
        :rtype: str
        """
        return self._beneficiary_name

    @beneficiary_name.setter
    def beneficiary_name(self, beneficiary_name):
        """Sets the beneficiary_name of this MessageCEP.

        Es el nombre del beneficiario.  # noqa: E501

        :param beneficiary_name: The beneficiary_name of this MessageCEP.  # noqa: E501
        :type: str
        """

        self._beneficiary_name = beneficiary_name

    @property
    def beneficiary_rfc(self):
        """Gets the beneficiary_rfc of this MessageCEP.  # noqa: E501

        Es el Registro Federal de Contribuyentes (RFC) del beneficiario.  # noqa: E501

        :return: The beneficiary_rfc of this MessageCEP.  # noqa: E501
        :rtype: str
        """
        return self._beneficiary_rfc

    @beneficiary_rfc.setter
    def beneficiary_rfc(self, beneficiary_rfc):
        """Sets the beneficiary_rfc of this MessageCEP.

        Es el Registro Federal de Contribuyentes (RFC) del beneficiario.  # noqa: E501

        :param beneficiary_rfc: The beneficiary_rfc of this MessageCEP.  # noqa: E501
        :type: str
        """

        self._beneficiary_rfc = beneficiary_rfc

    @property
    def cadena_original(self):
        """Gets the cadena_original of this MessageCEP.  # noqa: E501

        Es la cadena original emitida por el Servicio de Administración Tributaria (SAT).  # noqa: E501

        :return: The cadena_original of this MessageCEP.  # noqa: E501
        :rtype: str
        """
        return self._cadena_original

    @cadena_original.setter
    def cadena_original(self, cadena_original):
        """Sets the cadena_original of this MessageCEP.

        Es la cadena original emitida por el Servicio de Administración Tributaria (SAT).  # noqa: E501

        :param cadena_original: The cadena_original of this MessageCEP.  # noqa: E501
        :type: str
        """

        self._cadena_original = cadena_original

    @property
    def capture_date(self):
        """Gets the capture_date of this MessageCEP.  # noqa: E501

        Es la fecha de captura.  # noqa: E501

        :return: The capture_date of this MessageCEP.  # noqa: E501
        :rtype: datetime
        """
        return self._capture_date

    @capture_date.setter
    def capture_date(self, capture_date):
        """Sets the capture_date of this MessageCEP.

        Es la fecha de captura.  # noqa: E501

        :param capture_date: The capture_date of this MessageCEP.  # noqa: E501
        :type: datetime
        """

        self._capture_date = capture_date

    @property
    def certificate_serial_number(self):
        """Gets the certificate_serial_number of this MessageCEP.  # noqa: E501

        Es el número de serie emitido por el SAT  # noqa: E501

        :return: The certificate_serial_number of this MessageCEP.  # noqa: E501
        :rtype: str
        """
        return self._certificate_serial_number

    @certificate_serial_number.setter
    def certificate_serial_number(self, certificate_serial_number):
        """Sets the certificate_serial_number of this MessageCEP.

        Es el número de serie emitido por el SAT  # noqa: E501

        :param certificate_serial_number: The certificate_serial_number of this MessageCEP.  # noqa: E501
        :type: str
        """

        self._certificate_serial_number = certificate_serial_number

    @property
    def clave_rastreo(self):
        """Gets the clave_rastreo of this MessageCEP.  # noqa: E501

        Es la clave de rastreo de la operación.  # noqa: E501

        :return: The clave_rastreo of this MessageCEP.  # noqa: E501
        :rtype: str
        """
        return self._clave_rastreo

    @clave_rastreo.setter
    def clave_rastreo(self, clave_rastreo):
        """Sets the clave_rastreo of this MessageCEP.

        Es la clave de rastreo de la operación.  # noqa: E501

        :param clave_rastreo: The clave_rastreo of this MessageCEP.  # noqa: E501
        :type: str
        """

        self._clave_rastreo = clave_rastreo

    @property
    def description(self):
        """Gets the description of this MessageCEP.  # noqa: E501

        Es la descripción de la operación.  # noqa: E501

        :return: The description of this MessageCEP.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MessageCEP.

        Es la descripción de la operación.  # noqa: E501

        :param description: The description of this MessageCEP.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def iva(self):
        """Gets the iva of this MessageCEP.  # noqa: E501

        Es el Impuesto al Valor Agregado (IVA) de la operación.  # noqa: E501

        :return: The iva of this MessageCEP.  # noqa: E501
        :rtype: float
        """
        return self._iva

    @iva.setter
    def iva(self, iva):
        """Sets the iva of this MessageCEP.

        Es el Impuesto al Valor Agregado (IVA) de la operación.  # noqa: E501

        :param iva: The iva of this MessageCEP.  # noqa: E501
        :type: float
        """

        self._iva = iva

    @property
    def operation_date(self):
        """Gets the operation_date of this MessageCEP.  # noqa: E501

        Es la fecha en la que se realizó la operación.  # noqa: E501

        :return: The operation_date of this MessageCEP.  # noqa: E501
        :rtype: datetime
        """
        return self._operation_date

    @operation_date.setter
    def operation_date(self, operation_date):
        """Sets the operation_date of this MessageCEP.

        Es la fecha en la que se realizó la operación.  # noqa: E501

        :param operation_date: The operation_date of this MessageCEP.  # noqa: E501
        :type: datetime
        """

        self._operation_date = operation_date

    @property
    def operation_date_cep(self):
        """Gets the operation_date_cep of this MessageCEP.  # noqa: E501

        Es la fecha en la que se genera el CEP.  # noqa: E501

        :return: The operation_date_cep of this MessageCEP.  # noqa: E501
        :rtype: datetime
        """
        return self._operation_date_cep

    @operation_date_cep.setter
    def operation_date_cep(self, operation_date_cep):
        """Sets the operation_date_cep of this MessageCEP.

        Es la fecha en la que se genera el CEP.  # noqa: E501

        :param operation_date_cep: The operation_date_cep of this MessageCEP.  # noqa: E501
        :type: datetime
        """

        self._operation_date_cep = operation_date_cep

    @property
    def reference(self):
        """Gets the reference of this MessageCEP.  # noqa: E501

        Es la Referencia de la operación  # noqa: E501

        :return: The reference of this MessageCEP.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this MessageCEP.

        Es la Referencia de la operación  # noqa: E501

        :param reference: The reference of this MessageCEP.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def sender_name(self):
        """Gets the sender_name of this MessageCEP.  # noqa: E501

        Es el nombre de quién envía la operación.  # noqa: E501

        :return: The sender_name of this MessageCEP.  # noqa: E501
        :rtype: str
        """
        return self._sender_name

    @sender_name.setter
    def sender_name(self, sender_name):
        """Sets the sender_name of this MessageCEP.

        Es el nombre de quién envía la operación.  # noqa: E501

        :param sender_name: The sender_name of this MessageCEP.  # noqa: E501
        :type: str
        """

        self._sender_name = sender_name

    @property
    def sender_rfc(self):
        """Gets the sender_rfc of this MessageCEP.  # noqa: E501

        Es el Registro Federal de Contrinuyentes (RFC) de quién envía la operación.  # noqa: E501

        :return: The sender_rfc of this MessageCEP.  # noqa: E501
        :rtype: str
        """
        return self._sender_rfc

    @sender_rfc.setter
    def sender_rfc(self, sender_rfc):
        """Sets the sender_rfc of this MessageCEP.

        Es el Registro Federal de Contrinuyentes (RFC) de quién envía la operación.  # noqa: E501

        :param sender_rfc: The sender_rfc of this MessageCEP.  # noqa: E501
        :type: str
        """

        self._sender_rfc = sender_rfc

    @property
    def signature(self):
        """Gets the signature of this MessageCEP.  # noqa: E501

        Firma del CEP  # noqa: E501

        :return: The signature of this MessageCEP.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this MessageCEP.

        Firma del CEP  # noqa: E501

        :param signature: The signature of this MessageCEP.  # noqa: E501
        :type: str
        """

        self._signature = signature

    @property
    def url_zip(self):
        """Gets the url_zip of this MessageCEP.  # noqa: E501

        Dirección URL de descarga del archivo ZIP que contiene el PDF y XML del CEP proporcionado por BANXICO  # noqa: E501

        :return: The url_zip of this MessageCEP.  # noqa: E501
        :rtype: str
        """
        return self._url_zip

    @url_zip.setter
    def url_zip(self, url_zip):
        """Sets the url_zip of this MessageCEP.

        Dirección URL de descarga del archivo ZIP que contiene el PDF y XML del CEP proporcionado por BANXICO  # noqa: E501

        :param url_zip: The url_zip of this MessageCEP.  # noqa: E501
        :type: str
        """

        self._url_zip = url_zip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MessageCEP, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MessageCEP):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
