# coding: utf-8

"""
    Wire4RestAPI

    Referencia de la API de Wire4  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from wire4_client.models.payment import Payment  # noqa: F401,E501


class PaymentsRequestId(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authorization_date': 'datetime',
        'request_date': 'datetime',
        'request_id': 'str',
        'total_amount': 'float',
        'total_transactions': 'int',
        'transactions': 'list[Payment]'
    }

    attribute_map = {
        'authorization_date': 'authorization_date',
        'request_date': 'request_date',
        'request_id': 'request_id',
        'total_amount': 'total_amount',
        'total_transactions': 'total_transactions',
        'transactions': 'transactions'
    }

    def __init__(self, authorization_date=None, request_date=None, request_id=None, total_amount=None, total_transactions=None, transactions=None):  # noqa: E501
        """PaymentsRequestId - a model defined in Swagger"""  # noqa: E501
        self._authorization_date = None
        self._request_date = None
        self._request_id = None
        self._total_amount = None
        self._total_transactions = None
        self._transactions = None
        self.discriminator = None
        if authorization_date is not None:
            self.authorization_date = authorization_date
        if request_date is not None:
            self.request_date = request_date
        if request_id is not None:
            self.request_id = request_id
        if total_amount is not None:
            self.total_amount = total_amount
        if total_transactions is not None:
            self.total_transactions = total_transactions
        if transactions is not None:
            self.transactions = transactions

    @property
    def authorization_date(self):
        """Gets the authorization_date of this PaymentsRequestId.  # noqa: E501

        Fecha en que el usuario propietario del token emitió la autorización  # noqa: E501

        :return: The authorization_date of this PaymentsRequestId.  # noqa: E501
        :rtype: datetime
        """
        return self._authorization_date

    @authorization_date.setter
    def authorization_date(self, authorization_date):
        """Sets the authorization_date of this PaymentsRequestId.

        Fecha en que el usuario propietario del token emitió la autorización  # noqa: E501

        :param authorization_date: The authorization_date of this PaymentsRequestId.  # noqa: E501
        :type: datetime
        """

        self._authorization_date = authorization_date

    @property
    def request_date(self):
        """Gets the request_date of this PaymentsRequestId.  # noqa: E501

        Fecha en que se realizó la petición de registro de transacciones  # noqa: E501

        :return: The request_date of this PaymentsRequestId.  # noqa: E501
        :rtype: datetime
        """
        return self._request_date

    @request_date.setter
    def request_date(self, request_date):
        """Sets the request_date of this PaymentsRequestId.

        Fecha en que se realizó la petición de registro de transacciones  # noqa: E501

        :param request_date: The request_date of this PaymentsRequestId.  # noqa: E501
        :type: datetime
        """

        self._request_date = request_date

    @property
    def request_id(self):
        """Gets the request_id of this PaymentsRequestId.  # noqa: E501

        Identificador de la petición del registro de transacciones  # noqa: E501

        :return: The request_id of this PaymentsRequestId.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this PaymentsRequestId.

        Identificador de la petición del registro de transacciones  # noqa: E501

        :param request_id: The request_id of this PaymentsRequestId.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def total_amount(self):
        """Gets the total_amount of this PaymentsRequestId.  # noqa: E501

        Monto total de las transacciones registradas  # noqa: E501

        :return: The total_amount of this PaymentsRequestId.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this PaymentsRequestId.

        Monto total de las transacciones registradas  # noqa: E501

        :param total_amount: The total_amount of this PaymentsRequestId.  # noqa: E501
        :type: float
        """

        self._total_amount = total_amount

    @property
    def total_transactions(self):
        """Gets the total_transactions of this PaymentsRequestId.  # noqa: E501

        Total de transacciones en la petición  # noqa: E501

        :return: The total_transactions of this PaymentsRequestId.  # noqa: E501
        :rtype: int
        """
        return self._total_transactions

    @total_transactions.setter
    def total_transactions(self, total_transactions):
        """Sets the total_transactions of this PaymentsRequestId.

        Total de transacciones en la petición  # noqa: E501

        :param total_transactions: The total_transactions of this PaymentsRequestId.  # noqa: E501
        :type: int
        """

        self._total_transactions = total_transactions

    @property
    def transactions(self):
        """Gets the transactions of this PaymentsRequestId.  # noqa: E501

        Lista de las transacciones registradas  # noqa: E501

        :return: The transactions of this PaymentsRequestId.  # noqa: E501
        :rtype: list[Payment]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this PaymentsRequestId.

        Lista de las transacciones registradas  # noqa: E501

        :param transactions: The transactions of this PaymentsRequestId.  # noqa: E501
        :type: list[Payment]
        """

        self._transactions = transactions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentsRequestId, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentsRequestId):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
