# coding: utf-8

"""
    Wire4RestAPI

    Referencia de la API de Wire4  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaymentRequestReq(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'cancel_return_url': 'str',
        'customer': 'Customer',
        'description': 'str',
        'due_date': 'date',
        'method': 'str',
        'order_id': 'str',
        'return_url': 'str',
        'type': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'cancel_return_url': 'cancel_return_url',
        'customer': 'customer',
        'description': 'description',
        'due_date': 'due_date',
        'method': 'method',
        'order_id': 'order_id',
        'return_url': 'return_url',
        'type': 'type'
    }

    def __init__(self, amount=None, cancel_return_url=None, customer=None, description=None, due_date=None, method=None, order_id=None, return_url=None, type=None):  # noqa: E501
        """PaymentRequestReq - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._cancel_return_url = None
        self._customer = None
        self._description = None
        self._due_date = None
        self._method = None
        self._order_id = None
        self._return_url = None
        self._type = None
        self.discriminator = None
        self.amount = amount
        if cancel_return_url is not None:
            self.cancel_return_url = cancel_return_url
        if customer is not None:
            self.customer = customer
        if description is not None:
            self.description = description
        if due_date is not None:
            self.due_date = due_date
        self.method = method
        self.order_id = order_id
        if return_url is not None:
            self.return_url = return_url
        if type is not None:
            self.type = type

    @property
    def amount(self):
        """Gets the amount of this PaymentRequestReq.  # noqa: E501

        Es el monto de la solicitud de pago  # noqa: E501

        :return: The amount of this PaymentRequestReq.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentRequestReq.

        Es el monto de la solicitud de pago  # noqa: E501

        :param amount: The amount of this PaymentRequestReq.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def cancel_return_url(self):
        """Gets the cancel_return_url of this PaymentRequestReq.  # noqa: E501

        Es la dirección URL a la que se redirigirá en caso de que el usuario cancele.  # noqa: E501

        :return: The cancel_return_url of this PaymentRequestReq.  # noqa: E501
        :rtype: str
        """
        return self._cancel_return_url

    @cancel_return_url.setter
    def cancel_return_url(self, cancel_return_url):
        """Sets the cancel_return_url of this PaymentRequestReq.

        Es la dirección URL a la que se redirigirá en caso de que el usuario cancele.  # noqa: E501

        :param cancel_return_url: The cancel_return_url of this PaymentRequestReq.  # noqa: E501
        :type: str
        """

        self._cancel_return_url = cancel_return_url

    @property
    def customer(self):
        """Gets the customer of this PaymentRequestReq.  # noqa: E501


        :return: The customer of this PaymentRequestReq.  # noqa: E501
        :rtype: Customer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this PaymentRequestReq.


        :param customer: The customer of this PaymentRequestReq.  # noqa: E501
        :type: Customer
        """

        self._customer = customer

    @property
    def description(self):
        """Gets the description of this PaymentRequestReq.  # noqa: E501

        Es la descripción de la solicitud de pago.  # noqa: E501

        :return: The description of this PaymentRequestReq.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PaymentRequestReq.

        Es la descripción de la solicitud de pago.  # noqa: E501

        :param description: The description of this PaymentRequestReq.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def due_date(self):
        """Gets the due_date of this PaymentRequestReq.  # noqa: E501

        Es la fecha de operación de la solicitud de pago.  # noqa: E501

        :return: The due_date of this PaymentRequestReq.  # noqa: E501
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this PaymentRequestReq.

        Es la fecha de operación de la solicitud de pago.  # noqa: E501

        :param due_date: The due_date of this PaymentRequestReq.  # noqa: E501
        :type: date
        """

        self._due_date = due_date

    @property
    def method(self):
        """Gets the method of this PaymentRequestReq.  # noqa: E501


        :return: The method of this PaymentRequestReq.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this PaymentRequestReq.


        :param method: The method of this PaymentRequestReq.  # noqa: E501
        :type: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")  # noqa: E501
        allowed_values = ["CARD", "CASH"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def order_id(self):
        """Gets the order_id of this PaymentRequestReq.  # noqa: E501

        Número de orden asignado por el cliente de Wire4  # noqa: E501

        :return: The order_id of this PaymentRequestReq.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this PaymentRequestReq.

        Número de orden asignado por el cliente de Wire4  # noqa: E501

        :param order_id: The order_id of this PaymentRequestReq.  # noqa: E501
        :type: str
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")  # noqa: E501

        self._order_id = order_id

    @property
    def return_url(self):
        """Gets the return_url of this PaymentRequestReq.  # noqa: E501

        Es la dirección URL a la que se redirigirá en caso de éxito.  # noqa: E501

        :return: The return_url of this PaymentRequestReq.  # noqa: E501
        :rtype: str
        """
        return self._return_url

    @return_url.setter
    def return_url(self, return_url):
        """Sets the return_url of this PaymentRequestReq.

        Es la dirección URL a la que se redirigirá en caso de éxito.  # noqa: E501

        :param return_url: The return_url of this PaymentRequestReq.  # noqa: E501
        :type: str
        """

        self._return_url = return_url

    @property
    def type(self):
        """Gets the type of this PaymentRequestReq.  # noqa: E501

        Tipo de pago por paycash  # noqa: E501

        :return: The type of this PaymentRequestReq.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PaymentRequestReq.

        Tipo de pago por paycash  # noqa: E501

        :param type: The type of this PaymentRequestReq.  # noqa: E501
        :type: str
        """
        allowed_values = ["RECURRENT", "ONE_OCCASION"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentRequestReq, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentRequestReq):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
