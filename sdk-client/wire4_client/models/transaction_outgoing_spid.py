# coding: utf-8

"""
    Wire4RestAPI

    Referencia de la API de Wire4  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TransactionOutgoingSpid(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'beneficiary_account': 'str',
        'cancel_return_url': 'str',
        'classification_id': 'str',
        'currency_code': 'str',
        'email': 'list[str]',
        'numeric_reference_spid': 'int',
        'order_id': 'str',
        'payment_concept_spid': 'str',
        'return_url': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'beneficiary_account': 'beneficiary_account',
        'cancel_return_url': 'cancel_return_url',
        'classification_id': 'classification_id',
        'currency_code': 'currency_code',
        'email': 'email',
        'numeric_reference_spid': 'numeric_reference_spid',
        'order_id': 'order_id',
        'payment_concept_spid': 'payment_concept_spid',
        'return_url': 'return_url'
    }

    def __init__(self, amount=None, beneficiary_account=None, cancel_return_url=None, classification_id=None, currency_code=None, email=None, numeric_reference_spid=None, order_id=None, payment_concept_spid=None, return_url=None):  # noqa: E501
        """TransactionOutgoingSpid - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._beneficiary_account = None
        self._cancel_return_url = None
        self._classification_id = None
        self._currency_code = None
        self._email = None
        self._numeric_reference_spid = None
        self._order_id = None
        self._payment_concept_spid = None
        self._return_url = None
        self.discriminator = None
        self.amount = amount
        self.beneficiary_account = beneficiary_account
        self.cancel_return_url = cancel_return_url
        self.classification_id = classification_id
        self.currency_code = currency_code
        if email is not None:
            self.email = email
        self.numeric_reference_spid = numeric_reference_spid
        self.order_id = order_id
        self.payment_concept_spid = payment_concept_spid
        self.return_url = return_url

    @property
    def amount(self):
        """Gets the amount of this TransactionOutgoingSpid.  # noqa: E501

        Es el monto de la transferencia. Se valida que sean máximo 20 dígitos y 2 decimales. Ejemplo 1000.00  # noqa: E501

        :return: The amount of this TransactionOutgoingSpid.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TransactionOutgoingSpid.

        Es el monto de la transferencia. Se valida que sean máximo 20 dígitos y 2 decimales. Ejemplo 1000.00  # noqa: E501

        :param amount: The amount of this TransactionOutgoingSpid.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def beneficiary_account(self):
        """Gets the beneficiary_account of this TransactionOutgoingSpid.  # noqa: E501

        Cuenta del beneficiario, podría ser un número celular (10dígitos), tarjeta de débito (TDD) o Cuenta CLABE interbancaria (18 dígitos).   # noqa: E501

        :return: The beneficiary_account of this TransactionOutgoingSpid.  # noqa: E501
        :rtype: str
        """
        return self._beneficiary_account

    @beneficiary_account.setter
    def beneficiary_account(self, beneficiary_account):
        """Sets the beneficiary_account of this TransactionOutgoingSpid.

        Cuenta del beneficiario, podría ser un número celular (10dígitos), tarjeta de débito (TDD) o Cuenta CLABE interbancaria (18 dígitos).   # noqa: E501

        :param beneficiary_account: The beneficiary_account of this TransactionOutgoingSpid.  # noqa: E501
        :type: str
        """
        if beneficiary_account is None:
            raise ValueError("Invalid value for `beneficiary_account`, must not be `None`")  # noqa: E501

        self._beneficiary_account = beneficiary_account

    @property
    def cancel_return_url(self):
        """Gets the cancel_return_url of this TransactionOutgoingSpid.  # noqa: E501

        Es la dirección URL a la que se redirigirá en caso de que el usario cancele el registro.  # noqa: E501

        :return: The cancel_return_url of this TransactionOutgoingSpid.  # noqa: E501
        :rtype: str
        """
        return self._cancel_return_url

    @cancel_return_url.setter
    def cancel_return_url(self, cancel_return_url):
        """Sets the cancel_return_url of this TransactionOutgoingSpid.

        Es la dirección URL a la que se redirigirá en caso de que el usario cancele el registro.  # noqa: E501

        :param cancel_return_url: The cancel_return_url of this TransactionOutgoingSpid.  # noqa: E501
        :type: str
        """
        if cancel_return_url is None:
            raise ValueError("Invalid value for `cancel_return_url`, must not be `None`")  # noqa: E501

        self._cancel_return_url = cancel_return_url

    @property
    def classification_id(self):
        """Gets the classification_id of this TransactionOutgoingSpid.  # noqa: E501

        Es el identificador de la clasificación de la transferencia SPID.  # noqa: E501

        :return: The classification_id of this TransactionOutgoingSpid.  # noqa: E501
        :rtype: str
        """
        return self._classification_id

    @classification_id.setter
    def classification_id(self, classification_id):
        """Sets the classification_id of this TransactionOutgoingSpid.

        Es el identificador de la clasificación de la transferencia SPID.  # noqa: E501

        :param classification_id: The classification_id of this TransactionOutgoingSpid.  # noqa: E501
        :type: str
        """
        if classification_id is None:
            raise ValueError("Invalid value for `classification_id`, must not be `None`")  # noqa: E501

        self._classification_id = classification_id

    @property
    def currency_code(self):
        """Gets the currency_code of this TransactionOutgoingSpid.  # noqa: E501

        Código de moneda en la que opera la cuenta.  # noqa: E501

        :return: The currency_code of this TransactionOutgoingSpid.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this TransactionOutgoingSpid.

        Código de moneda en la que opera la cuenta.  # noqa: E501

        :param currency_code: The currency_code of this TransactionOutgoingSpid.  # noqa: E501
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def email(self):
        """Gets the email of this TransactionOutgoingSpid.  # noqa: E501

        Lista de correo electrónico (email) del beneficiario. Este campo es opcional.  # noqa: E501

        :return: The email of this TransactionOutgoingSpid.  # noqa: E501
        :rtype: list[str]
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this TransactionOutgoingSpid.

        Lista de correo electrónico (email) del beneficiario. Este campo es opcional.  # noqa: E501

        :param email: The email of this TransactionOutgoingSpid.  # noqa: E501
        :type: list[str]
        """

        self._email = email

    @property
    def numeric_reference_spid(self):
        """Gets the numeric_reference_spid of this TransactionOutgoingSpid.  # noqa: E501

        Es la referencia numérica de la transferencia.  # noqa: E501

        :return: The numeric_reference_spid of this TransactionOutgoingSpid.  # noqa: E501
        :rtype: int
        """
        return self._numeric_reference_spid

    @numeric_reference_spid.setter
    def numeric_reference_spid(self, numeric_reference_spid):
        """Sets the numeric_reference_spid of this TransactionOutgoingSpid.

        Es la referencia numérica de la transferencia.  # noqa: E501

        :param numeric_reference_spid: The numeric_reference_spid of this TransactionOutgoingSpid.  # noqa: E501
        :type: int
        """
        if numeric_reference_spid is None:
            raise ValueError("Invalid value for `numeric_reference_spid`, must not be `None`")  # noqa: E501

        self._numeric_reference_spid = numeric_reference_spid

    @property
    def order_id(self):
        """Gets the order_id of this TransactionOutgoingSpid.  # noqa: E501

        Es la referencia de la transferencia asignada por el cliente. Ejemplo: dae9c6ae-8c7a-42e8-99f4-ebe90566efae  # noqa: E501

        :return: The order_id of this TransactionOutgoingSpid.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this TransactionOutgoingSpid.

        Es la referencia de la transferencia asignada por el cliente. Ejemplo: dae9c6ae-8c7a-42e8-99f4-ebe90566efae  # noqa: E501

        :param order_id: The order_id of this TransactionOutgoingSpid.  # noqa: E501
        :type: str
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")  # noqa: E501

        self._order_id = order_id

    @property
    def payment_concept_spid(self):
        """Gets the payment_concept_spid of this TransactionOutgoingSpid.  # noqa: E501

        Es el concepto de la transferencia.  # noqa: E501

        :return: The payment_concept_spid of this TransactionOutgoingSpid.  # noqa: E501
        :rtype: str
        """
        return self._payment_concept_spid

    @payment_concept_spid.setter
    def payment_concept_spid(self, payment_concept_spid):
        """Sets the payment_concept_spid of this TransactionOutgoingSpid.

        Es el concepto de la transferencia.  # noqa: E501

        :param payment_concept_spid: The payment_concept_spid of this TransactionOutgoingSpid.  # noqa: E501
        :type: str
        """
        if payment_concept_spid is None:
            raise ValueError("Invalid value for `payment_concept_spid`, must not be `None`")  # noqa: E501

        self._payment_concept_spid = payment_concept_spid

    @property
    def return_url(self):
        """Gets the return_url of this TransactionOutgoingSpid.  # noqa: E501

        Es la dirección URL a la que se redirigirá en caso de éxito.  # noqa: E501

        :return: The return_url of this TransactionOutgoingSpid.  # noqa: E501
        :rtype: str
        """
        return self._return_url

    @return_url.setter
    def return_url(self, return_url):
        """Sets the return_url of this TransactionOutgoingSpid.

        Es la dirección URL a la que se redirigirá en caso de éxito.  # noqa: E501

        :param return_url: The return_url of this TransactionOutgoingSpid.  # noqa: E501
        :type: str
        """
        if return_url is None:
            raise ValueError("Invalid value for `return_url`, must not be `None`")  # noqa: E501

        self._return_url = return_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionOutgoingSpid, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionOutgoingSpid):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
