# coding: utf-8

"""
    Wire4RestAPI

    Referencia de la API de Wire4  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DepositantsRegister(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alias': 'str',
        'currency_code': 'str',
        'email': 'list[str]',
        'name': 'str'
    }

    attribute_map = {
        'alias': 'alias',
        'currency_code': 'currency_code',
        'email': 'email',
        'name': 'name'
    }

    def __init__(self, alias=None, currency_code=None, email=None, name=None):  # noqa: E501
        """DepositantsRegister - a model defined in Swagger"""  # noqa: E501
        self._alias = None
        self._currency_code = None
        self._email = None
        self._name = None
        self.discriminator = None
        self.alias = alias
        self.currency_code = currency_code
        if email is not None:
            self.email = email
        self.name = name

    @property
    def alias(self):
        """Gets the alias of this DepositantsRegister.  # noqa: E501

        Es el alias del depositante. Se valida hasta 80 caracteres.  # noqa: E501

        :return: The alias of this DepositantsRegister.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this DepositantsRegister.

        Es el alias del depositante. Se valida hasta 80 caracteres.  # noqa: E501

        :param alias: The alias of this DepositantsRegister.  # noqa: E501
        :type: str
        """
        if alias is None:
            raise ValueError("Invalid value for `alias`, must not be `None`")  # noqa: E501

        self._alias = alias

    @property
    def currency_code(self):
        """Gets the currency_code of this DepositantsRegister.  # noqa: E501

        Es el código de divisa en que operará el depositante. Es en el formato estándar de 3 dígitos.  Sólo se permiten los valores <b>MXP</b> y <b>USD</b>.  # noqa: E501

        :return: The currency_code of this DepositantsRegister.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this DepositantsRegister.

        Es el código de divisa en que operará el depositante. Es en el formato estándar de 3 dígitos.  Sólo se permiten los valores <b>MXP</b> y <b>USD</b>.  # noqa: E501

        :param currency_code: The currency_code of this DepositantsRegister.  # noqa: E501
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def email(self):
        """Gets the email of this DepositantsRegister.  # noqa: E501

        Es la lista de correos electrónicos (emails) del depositante. <br><br><b>Ejemplo</b>: mi_correo@correo.com,mi_correo@correo.com...  # noqa: E501

        :return: The email of this DepositantsRegister.  # noqa: E501
        :rtype: list[str]
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this DepositantsRegister.

        Es la lista de correos electrónicos (emails) del depositante. <br><br><b>Ejemplo</b>: mi_correo@correo.com,mi_correo@correo.com...  # noqa: E501

        :param email: The email of this DepositantsRegister.  # noqa: E501
        :type: list[str]
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this DepositantsRegister.  # noqa: E501

        Es el nombre del depositante. Se valida hasta 120 caracteres.  # noqa: E501

        :return: The name of this DepositantsRegister.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DepositantsRegister.

        Es el nombre del depositante. Se valida hasta 120 caracteres.  # noqa: E501

        :param name: The name of this DepositantsRegister.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DepositantsRegister, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DepositantsRegister):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
