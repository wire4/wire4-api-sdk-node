# coding: utf-8

"""
    Wire4RestAPI

    Referencia de la API de Wire4  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class MessageSubscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contract': 'str',
        'masked_contract': 'str',
        'subscription': 'str',
        'user': 'str',
        'user_key': 'str',
        'user_secret': 'str'
    }

    attribute_map = {
        'contract': 'contract',
        'masked_contract': 'masked_contract',
        'subscription': 'subscription',
        'user': 'user',
        'user_key': 'user_key',
        'user_secret': 'user_secret'
    }

    def __init__(self, contract=None, masked_contract=None, subscription=None, user=None, user_key=None, user_secret=None):  # noqa: E501
        """MessageSubscription - a model defined in Swagger"""  # noqa: E501
        self._contract = None
        self._masked_contract = None
        self._subscription = None
        self._user = None
        self._user_key = None
        self._user_secret = None
        self.discriminator = None
        if contract is not None:
            self.contract = contract
        if masked_contract is not None:
            self.masked_contract = masked_contract
        if subscription is not None:
            self.subscription = subscription
        if user is not None:
            self.user = user
        if user_key is not None:
            self.user_key = user_key
        if user_secret is not None:
            self.user_secret = user_secret

    @property
    def contract(self):
        """Gets the contract of this MessageSubscription.  # noqa: E501

        Es el contrato Monex, con el que se suscribió el cliente Monex en Wire4.  # noqa: E501

        :return: The contract of this MessageSubscription.  # noqa: E501
        :rtype: str
        """
        return self._contract

    @contract.setter
    def contract(self, contract):
        """Sets the contract of this MessageSubscription.

        Es el contrato Monex, con el que se suscribió el cliente Monex en Wire4.  # noqa: E501

        :param contract: The contract of this MessageSubscription.  # noqa: E501
        :type: str
        """

        self._contract = contract

    @property
    def masked_contract(self):
        """Gets the masked_contract of this MessageSubscription.  # noqa: E501

        Es el contrato enmascarado de Monex, con el que se suscribió el cliente Monex en Wire4.  # noqa: E501

        :return: The masked_contract of this MessageSubscription.  # noqa: E501
        :rtype: str
        """
        return self._masked_contract

    @masked_contract.setter
    def masked_contract(self, masked_contract):
        """Sets the masked_contract of this MessageSubscription.

        Es el contrato enmascarado de Monex, con el que se suscribió el cliente Monex en Wire4.  # noqa: E501

        :param masked_contract: The masked_contract of this MessageSubscription.  # noqa: E501
        :type: str
        """

        self._masked_contract = masked_contract

    @property
    def subscription(self):
        """Gets the subscription of this MessageSubscription.  # noqa: E501

        Es el identificador de la suscripción, el que se utilizará en las operaciones que solicitan una suscripción.  # noqa: E501

        :return: The subscription of this MessageSubscription.  # noqa: E501
        :rtype: str
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this MessageSubscription.

        Es el identificador de la suscripción, el que se utilizará en las operaciones que solicitan una suscripción.  # noqa: E501

        :param subscription: The subscription of this MessageSubscription.  # noqa: E501
        :type: str
        """

        self._subscription = subscription

    @property
    def user(self):
        """Gets the user of this MessageSubscription.  # noqa: E501

        Es el usuario enmascardo, con el que se suscribió el cliente Monex en Wire4.  # noqa: E501

        :return: The user of this MessageSubscription.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this MessageSubscription.

        Es el usuario enmascardo, con el que se suscribió el cliente Monex en Wire4.  # noqa: E501

        :param user: The user of this MessageSubscription.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def user_key(self):
        """Gets the user_key of this MessageSubscription.  # noqa: E501

        Es el usuario proporcionado por Wire4, el cuál se debe utilizar para autenticar a esta suscripción.  # noqa: E501

        :return: The user_key of this MessageSubscription.  # noqa: E501
        :rtype: str
        """
        return self._user_key

    @user_key.setter
    def user_key(self, user_key):
        """Sets the user_key of this MessageSubscription.

        Es el usuario proporcionado por Wire4, el cuál se debe utilizar para autenticar a esta suscripción.  # noqa: E501

        :param user_key: The user_key of this MessageSubscription.  # noqa: E501
        :type: str
        """

        self._user_key = user_key

    @property
    def user_secret(self):
        """Gets the user_secret of this MessageSubscription.  # noqa: E501

        Es la contraseña proporcionada por Wire4, la que se debe utilizar para autenticar a esta suscripción.  # noqa: E501

        :return: The user_secret of this MessageSubscription.  # noqa: E501
        :rtype: str
        """
        return self._user_secret

    @user_secret.setter
    def user_secret(self, user_secret):
        """Sets the user_secret of this MessageSubscription.

        Es la contraseña proporcionada por Wire4, la que se debe utilizar para autenticar a esta suscripción.  # noqa: E501

        :param user_secret: The user_secret of this MessageSubscription.  # noqa: E501
        :type: str
        """

        self._user_secret = user_secret

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MessageSubscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MessageSubscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
