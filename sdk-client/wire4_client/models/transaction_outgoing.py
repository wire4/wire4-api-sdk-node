# coding: utf-8

"""
    Wire4RestAPI

    Referencia de la API de Wire4  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TransactionOutgoing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'beneficiary_account': 'str',
        'beneficiary_bank_key': 'str',
        'concept': 'str',
        'currency_code': 'str',
        'email': 'list[str]',
        'order_id': 'str',
        'reference': 'int'
    }

    attribute_map = {
        'amount': 'amount',
        'beneficiary_account': 'beneficiary_account',
        'beneficiary_bank_key': 'beneficiary_bank_key',
        'concept': 'concept',
        'currency_code': 'currency_code',
        'email': 'email',
        'order_id': 'order_id',
        'reference': 'reference'
    }

    def __init__(self, amount=None, beneficiary_account=None, beneficiary_bank_key=None, concept=None, currency_code=None, email=None, order_id=None, reference=None):  # noqa: E501
        """TransactionOutgoing - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._beneficiary_account = None
        self._beneficiary_bank_key = None
        self._concept = None
        self._currency_code = None
        self._email = None
        self._order_id = None
        self._reference = None
        self.discriminator = None
        self.amount = amount
        self.beneficiary_account = beneficiary_account
        if beneficiary_bank_key is not None:
            self.beneficiary_bank_key = beneficiary_bank_key
        self.concept = concept
        self.currency_code = currency_code
        if email is not None:
            self.email = email
        self.order_id = order_id
        self.reference = reference

    @property
    def amount(self):
        """Gets the amount of this TransactionOutgoing.  # noqa: E501

        Monto de la transferencia  # noqa: E501

        :return: The amount of this TransactionOutgoing.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TransactionOutgoing.

        Monto de la transferencia  # noqa: E501

        :param amount: The amount of this TransactionOutgoing.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def beneficiary_account(self):
        """Gets the beneficiary_account of this TransactionOutgoing.  # noqa: E501

        Cuenta del beneficiario, podría ser un número celular, TDD o Cuenta CLABE interbancaria   # noqa: E501

        :return: The beneficiary_account of this TransactionOutgoing.  # noqa: E501
        :rtype: str
        """
        return self._beneficiary_account

    @beneficiary_account.setter
    def beneficiary_account(self, beneficiary_account):
        """Sets the beneficiary_account of this TransactionOutgoing.

        Cuenta del beneficiario, podría ser un número celular, TDD o Cuenta CLABE interbancaria   # noqa: E501

        :param beneficiary_account: The beneficiary_account of this TransactionOutgoing.  # noqa: E501
        :type: str
        """
        if beneficiary_account is None:
            raise ValueError("Invalid value for `beneficiary_account`, must not be `None`")  # noqa: E501

        self._beneficiary_account = beneficiary_account

    @property
    def beneficiary_bank_key(self):
        """Gets the beneficiary_bank_key of this TransactionOutgoing.  # noqa: E501

        La clave del banco beneficiario, proprocionada por BANXICO, este campo solo es obligatario cuando la cuenta beneficiaria es un número celular (*).  # noqa: E501

        :return: The beneficiary_bank_key of this TransactionOutgoing.  # noqa: E501
        :rtype: str
        """
        return self._beneficiary_bank_key

    @beneficiary_bank_key.setter
    def beneficiary_bank_key(self, beneficiary_bank_key):
        """Sets the beneficiary_bank_key of this TransactionOutgoing.

        La clave del banco beneficiario, proprocionada por BANXICO, este campo solo es obligatario cuando la cuenta beneficiaria es un número celular (*).  # noqa: E501

        :param beneficiary_bank_key: The beneficiary_bank_key of this TransactionOutgoing.  # noqa: E501
        :type: str
        """

        self._beneficiary_bank_key = beneficiary_bank_key

    @property
    def concept(self):
        """Gets the concept of this TransactionOutgoing.  # noqa: E501

        Concepto de la transferencia  # noqa: E501

        :return: The concept of this TransactionOutgoing.  # noqa: E501
        :rtype: str
        """
        return self._concept

    @concept.setter
    def concept(self, concept):
        """Sets the concept of this TransactionOutgoing.

        Concepto de la transferencia  # noqa: E501

        :param concept: The concept of this TransactionOutgoing.  # noqa: E501
        :type: str
        """
        if concept is None:
            raise ValueError("Invalid value for `concept`, must not be `None`")  # noqa: E501

        self._concept = concept

    @property
    def currency_code(self):
        """Gets the currency_code of this TransactionOutgoing.  # noqa: E501

        Código de moneda en la que opera la cuenta  # noqa: E501

        :return: The currency_code of this TransactionOutgoing.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this TransactionOutgoing.

        Código de moneda en la que opera la cuenta  # noqa: E501

        :param currency_code: The currency_code of this TransactionOutgoing.  # noqa: E501
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def email(self):
        """Gets the email of this TransactionOutgoing.  # noqa: E501

        Lista de email del beneficiario,es opcional  # noqa: E501

        :return: The email of this TransactionOutgoing.  # noqa: E501
        :rtype: list[str]
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this TransactionOutgoing.

        Lista de email del beneficiario,es opcional  # noqa: E501

        :param email: The email of this TransactionOutgoing.  # noqa: E501
        :type: list[str]
        """

        self._email = email

    @property
    def order_id(self):
        """Gets the order_id of this TransactionOutgoing.  # noqa: E501

        Referencia de la transferencia asignada por el cliente  # noqa: E501

        :return: The order_id of this TransactionOutgoing.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this TransactionOutgoing.

        Referencia de la transferencia asignada por el cliente  # noqa: E501

        :param order_id: The order_id of this TransactionOutgoing.  # noqa: E501
        :type: str
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")  # noqa: E501

        self._order_id = order_id

    @property
    def reference(self):
        """Gets the reference of this TransactionOutgoing.  # noqa: E501

        Referencia numérica de la transferencia  # noqa: E501

        :return: The reference of this TransactionOutgoing.  # noqa: E501
        :rtype: int
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this TransactionOutgoing.

        Referencia numérica de la transferencia  # noqa: E501

        :param reference: The reference of this TransactionOutgoing.  # noqa: E501
        :type: int
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")  # noqa: E501

        self._reference = reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionOutgoing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionOutgoing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
