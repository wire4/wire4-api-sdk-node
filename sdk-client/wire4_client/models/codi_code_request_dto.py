# coding: utf-8

"""
    Wire4RestAPI

    Referencia de la API de Wire4  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CodiCodeRequestDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'concept': 'str',
        'due_date': 'datetime',
        'metadata': 'str',
        'order_id': 'str',
        'phone_number': 'str',
        'type': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'concept': 'concept',
        'due_date': 'due_date',
        'metadata': 'metadata',
        'order_id': 'order_id',
        'phone_number': 'phone_number',
        'type': 'type'
    }

    def __init__(self, amount=None, concept=None, due_date=None, metadata=None, order_id=None, phone_number=None, type=None):  # noqa: E501
        """CodiCodeRequestDTO - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._concept = None
        self._due_date = None
        self._metadata = None
        self._order_id = None
        self._phone_number = None
        self._type = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        self.concept = concept
        self.due_date = due_date
        if metadata is not None:
            self.metadata = metadata
        self.order_id = order_id
        if phone_number is not None:
            self.phone_number = phone_number
        self.type = type

    @property
    def amount(self):
        """Gets the amount of this CodiCodeRequestDTO.  # noqa: E501

        Monto del pago CODI®  # noqa: E501

        :return: The amount of this CodiCodeRequestDTO.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CodiCodeRequestDTO.

        Monto del pago CODI®  # noqa: E501

        :param amount: The amount of this CodiCodeRequestDTO.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def concept(self):
        """Gets the concept of this CodiCodeRequestDTO.  # noqa: E501

        Descripción del pago CODI®  # noqa: E501

        :return: The concept of this CodiCodeRequestDTO.  # noqa: E501
        :rtype: str
        """
        return self._concept

    @concept.setter
    def concept(self, concept):
        """Sets the concept of this CodiCodeRequestDTO.

        Descripción del pago CODI®  # noqa: E501

        :param concept: The concept of this CodiCodeRequestDTO.  # noqa: E501
        :type: str
        """
        if concept is None:
            raise ValueError("Invalid value for `concept`, must not be `None`")  # noqa: E501

        self._concept = concept

    @property
    def due_date(self):
        """Gets the due_date of this CodiCodeRequestDTO.  # noqa: E501

        Fecha de operación pago CODI®, formato: yyyy-MM-dd'T'HH:mm:ss  # noqa: E501

        :return: The due_date of this CodiCodeRequestDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this CodiCodeRequestDTO.

        Fecha de operación pago CODI®, formato: yyyy-MM-dd'T'HH:mm:ss  # noqa: E501

        :param due_date: The due_date of this CodiCodeRequestDTO.  # noqa: E501
        :type: datetime
        """
        if due_date is None:
            raise ValueError("Invalid value for `due_date`, must not be `None`")  # noqa: E501

        self._due_date = due_date

    @property
    def metadata(self):
        """Gets the metadata of this CodiCodeRequestDTO.  # noqa: E501

        Campo de metada CODI®, longitud máxima determinada por configuracion de la empresa, por defecto 100 caracteres  # noqa: E501

        :return: The metadata of this CodiCodeRequestDTO.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CodiCodeRequestDTO.

        Campo de metada CODI®, longitud máxima determinada por configuracion de la empresa, por defecto 100 caracteres  # noqa: E501

        :param metadata: The metadata of this CodiCodeRequestDTO.  # noqa: E501
        :type: str
        """

        self._metadata = metadata

    @property
    def order_id(self):
        """Gets the order_id of this CodiCodeRequestDTO.  # noqa: E501

        Referencia de la transferencia asignada por el cliente  # noqa: E501

        :return: The order_id of this CodiCodeRequestDTO.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this CodiCodeRequestDTO.

        Referencia de la transferencia asignada por el cliente  # noqa: E501

        :param order_id: The order_id of this CodiCodeRequestDTO.  # noqa: E501
        :type: str
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")  # noqa: E501

        self._order_id = order_id

    @property
    def phone_number(self):
        """Gets the phone_number of this CodiCodeRequestDTO.  # noqa: E501

        Número de teléfono móvil en caso de ser un pago CODI® usando 'PUSH_NOTIFICATION' estecampo sería obligatorio  # noqa: E501

        :return: The phone_number of this CodiCodeRequestDTO.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this CodiCodeRequestDTO.

        Número de teléfono móvil en caso de ser un pago CODI® usando 'PUSH_NOTIFICATION' estecampo sería obligatorio  # noqa: E501

        :param phone_number: The phone_number of this CodiCodeRequestDTO.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def type(self):
        """Gets the type of this CodiCodeRequestDTO.  # noqa: E501

        El tipo de código QR para pago con CODI®  # noqa: E501

        :return: The type of this CodiCodeRequestDTO.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CodiCodeRequestDTO.

        El tipo de código QR para pago con CODI®  # noqa: E501

        :param type: The type of this CodiCodeRequestDTO.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["PUSH_NOTIFICATION", "QR_CODE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodiCodeRequestDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodiCodeRequestDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
