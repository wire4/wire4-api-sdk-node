# coding: utf-8

"""
    Wire4RestAPI

    Referencia de la API de Wire4  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaymentRequestReportDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'str',
        'cancel_return_url': 'str',
        'customer': 'Customer',
        'description': 'str',
        'due_date': 'str',
        'failed_charges': 'list[FailedChargesDataDTO]',
        'order_id': 'str',
        'return_url': 'str',
        'status': 'str',
        'success_charge': 'SuccessDataDTO'
    }

    attribute_map = {
        'amount': 'amount',
        'cancel_return_url': 'cancel_return_url',
        'customer': 'customer',
        'description': 'description',
        'due_date': 'due_date',
        'failed_charges': 'failed_charges',
        'order_id': 'order_id',
        'return_url': 'return_url',
        'status': 'status',
        'success_charge': 'success_charge'
    }

    def __init__(self, amount=None, cancel_return_url=None, customer=None, description=None, due_date=None, failed_charges=None, order_id=None, return_url=None, status=None, success_charge=None):  # noqa: E501
        """PaymentRequestReportDTO - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._cancel_return_url = None
        self._customer = None
        self._description = None
        self._due_date = None
        self._failed_charges = None
        self._order_id = None
        self._return_url = None
        self._status = None
        self._success_charge = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if cancel_return_url is not None:
            self.cancel_return_url = cancel_return_url
        if customer is not None:
            self.customer = customer
        if description is not None:
            self.description = description
        if due_date is not None:
            self.due_date = due_date
        if failed_charges is not None:
            self.failed_charges = failed_charges
        if order_id is not None:
            self.order_id = order_id
        if return_url is not None:
            self.return_url = return_url
        if status is not None:
            self.status = status
        if success_charge is not None:
            self.success_charge = success_charge

    @property
    def amount(self):
        """Gets the amount of this PaymentRequestReportDTO.  # noqa: E501


        :return: The amount of this PaymentRequestReportDTO.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentRequestReportDTO.


        :param amount: The amount of this PaymentRequestReportDTO.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def cancel_return_url(self):
        """Gets the cancel_return_url of this PaymentRequestReportDTO.  # noqa: E501


        :return: The cancel_return_url of this PaymentRequestReportDTO.  # noqa: E501
        :rtype: str
        """
        return self._cancel_return_url

    @cancel_return_url.setter
    def cancel_return_url(self, cancel_return_url):
        """Sets the cancel_return_url of this PaymentRequestReportDTO.


        :param cancel_return_url: The cancel_return_url of this PaymentRequestReportDTO.  # noqa: E501
        :type: str
        """

        self._cancel_return_url = cancel_return_url

    @property
    def customer(self):
        """Gets the customer of this PaymentRequestReportDTO.  # noqa: E501


        :return: The customer of this PaymentRequestReportDTO.  # noqa: E501
        :rtype: Customer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this PaymentRequestReportDTO.


        :param customer: The customer of this PaymentRequestReportDTO.  # noqa: E501
        :type: Customer
        """

        self._customer = customer

    @property
    def description(self):
        """Gets the description of this PaymentRequestReportDTO.  # noqa: E501


        :return: The description of this PaymentRequestReportDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PaymentRequestReportDTO.


        :param description: The description of this PaymentRequestReportDTO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def due_date(self):
        """Gets the due_date of this PaymentRequestReportDTO.  # noqa: E501


        :return: The due_date of this PaymentRequestReportDTO.  # noqa: E501
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this PaymentRequestReportDTO.


        :param due_date: The due_date of this PaymentRequestReportDTO.  # noqa: E501
        :type: str
        """

        self._due_date = due_date

    @property
    def failed_charges(self):
        """Gets the failed_charges of this PaymentRequestReportDTO.  # noqa: E501


        :return: The failed_charges of this PaymentRequestReportDTO.  # noqa: E501
        :rtype: list[FailedChargesDataDTO]
        """
        return self._failed_charges

    @failed_charges.setter
    def failed_charges(self, failed_charges):
        """Sets the failed_charges of this PaymentRequestReportDTO.


        :param failed_charges: The failed_charges of this PaymentRequestReportDTO.  # noqa: E501
        :type: list[FailedChargesDataDTO]
        """

        self._failed_charges = failed_charges

    @property
    def order_id(self):
        """Gets the order_id of this PaymentRequestReportDTO.  # noqa: E501


        :return: The order_id of this PaymentRequestReportDTO.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this PaymentRequestReportDTO.


        :param order_id: The order_id of this PaymentRequestReportDTO.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def return_url(self):
        """Gets the return_url of this PaymentRequestReportDTO.  # noqa: E501


        :return: The return_url of this PaymentRequestReportDTO.  # noqa: E501
        :rtype: str
        """
        return self._return_url

    @return_url.setter
    def return_url(self, return_url):
        """Sets the return_url of this PaymentRequestReportDTO.


        :param return_url: The return_url of this PaymentRequestReportDTO.  # noqa: E501
        :type: str
        """

        self._return_url = return_url

    @property
    def status(self):
        """Gets the status of this PaymentRequestReportDTO.  # noqa: E501


        :return: The status of this PaymentRequestReportDTO.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PaymentRequestReportDTO.


        :param status: The status of this PaymentRequestReportDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["NEW", "REQUESTED", "PAID", "CANCELLED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def success_charge(self):
        """Gets the success_charge of this PaymentRequestReportDTO.  # noqa: E501


        :return: The success_charge of this PaymentRequestReportDTO.  # noqa: E501
        :rtype: SuccessDataDTO
        """
        return self._success_charge

    @success_charge.setter
    def success_charge(self, success_charge):
        """Sets the success_charge of this PaymentRequestReportDTO.


        :param success_charge: The success_charge of this PaymentRequestReportDTO.  # noqa: E501
        :type: SuccessDataDTO
        """

        self._success_charge = success_charge

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentRequestReportDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentRequestReportDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
