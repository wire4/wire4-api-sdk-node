# coding: utf-8

"""
    Wire4RestAPI

    Referencia de la API de Wire4  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AddressCompany(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'city': 'str',
        'country_code': 'str',
        'exterior_number': 'str',
        'interior_number': 'str',
        'municipality': 'str',
        'postal_code': 'str',
        'settlement': 'str',
        'settlement_name': 'str',
        'state': 'str',
        'street_address': 'str'
    }

    attribute_map = {
        'city': 'city',
        'country_code': 'country_code',
        'exterior_number': 'exterior_number',
        'interior_number': 'interior_number',
        'municipality': 'municipality',
        'postal_code': 'postal_code',
        'settlement': 'settlement',
        'settlement_name': 'settlement_name',
        'state': 'state',
        'street_address': 'street_address'
    }

    def __init__(self, city=None, country_code=None, exterior_number=None, interior_number=None, municipality=None, postal_code=None, settlement=None, settlement_name=None, state=None, street_address=None):  # noqa: E501
        """AddressCompany - a model defined in Swagger"""  # noqa: E501
        self._city = None
        self._country_code = None
        self._exterior_number = None
        self._interior_number = None
        self._municipality = None
        self._postal_code = None
        self._settlement = None
        self._settlement_name = None
        self._state = None
        self._street_address = None
        self.discriminator = None
        if city is not None:
            self.city = city
        if country_code is not None:
            self.country_code = country_code
        if exterior_number is not None:
            self.exterior_number = exterior_number
        if interior_number is not None:
            self.interior_number = interior_number
        if municipality is not None:
            self.municipality = municipality
        if postal_code is not None:
            self.postal_code = postal_code
        if settlement is not None:
            self.settlement = settlement
        if settlement_name is not None:
            self.settlement_name = settlement_name
        if state is not None:
            self.state = state
        if street_address is not None:
            self.street_address = street_address

    @property
    def city(self):
        """Gets the city of this AddressCompany.  # noqa: E501

        La ciudad  # noqa: E501

        :return: The city of this AddressCompany.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AddressCompany.

        La ciudad  # noqa: E501

        :param city: The city of this AddressCompany.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country_code(self):
        """Gets the country_code of this AddressCompany.  # noqa: E501

        La clabe del país  # noqa: E501

        :return: The country_code of this AddressCompany.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this AddressCompany.

        La clabe del país  # noqa: E501

        :param country_code: The country_code of this AddressCompany.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def exterior_number(self):
        """Gets the exterior_number of this AddressCompany.  # noqa: E501

        Número exterior  # noqa: E501

        :return: The exterior_number of this AddressCompany.  # noqa: E501
        :rtype: str
        """
        return self._exterior_number

    @exterior_number.setter
    def exterior_number(self, exterior_number):
        """Sets the exterior_number of this AddressCompany.

        Número exterior  # noqa: E501

        :param exterior_number: The exterior_number of this AddressCompany.  # noqa: E501
        :type: str
        """

        self._exterior_number = exterior_number

    @property
    def interior_number(self):
        """Gets the interior_number of this AddressCompany.  # noqa: E501

        Número interior  # noqa: E501

        :return: The interior_number of this AddressCompany.  # noqa: E501
        :rtype: str
        """
        return self._interior_number

    @interior_number.setter
    def interior_number(self, interior_number):
        """Sets the interior_number of this AddressCompany.

        Número interior  # noqa: E501

        :param interior_number: The interior_number of this AddressCompany.  # noqa: E501
        :type: str
        """

        self._interior_number = interior_number

    @property
    def municipality(self):
        """Gets the municipality of this AddressCompany.  # noqa: E501

        El municipio  # noqa: E501

        :return: The municipality of this AddressCompany.  # noqa: E501
        :rtype: str
        """
        return self._municipality

    @municipality.setter
    def municipality(self, municipality):
        """Sets the municipality of this AddressCompany.

        El municipio  # noqa: E501

        :param municipality: The municipality of this AddressCompany.  # noqa: E501
        :type: str
        """

        self._municipality = municipality

    @property
    def postal_code(self):
        """Gets the postal_code of this AddressCompany.  # noqa: E501

        Código postal  # noqa: E501

        :return: The postal_code of this AddressCompany.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this AddressCompany.

        Código postal  # noqa: E501

        :param postal_code: The postal_code of this AddressCompany.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def settlement(self):
        """Gets the settlement of this AddressCompany.  # noqa: E501

        El asentamiento  # noqa: E501

        :return: The settlement of this AddressCompany.  # noqa: E501
        :rtype: str
        """
        return self._settlement

    @settlement.setter
    def settlement(self, settlement):
        """Sets the settlement of this AddressCompany.

        El asentamiento  # noqa: E501

        :param settlement: The settlement of this AddressCompany.  # noqa: E501
        :type: str
        """

        self._settlement = settlement

    @property
    def settlement_name(self):
        """Gets the settlement_name of this AddressCompany.  # noqa: E501

        El nombre del asentamiento  # noqa: E501

        :return: The settlement_name of this AddressCompany.  # noqa: E501
        :rtype: str
        """
        return self._settlement_name

    @settlement_name.setter
    def settlement_name(self, settlement_name):
        """Sets the settlement_name of this AddressCompany.

        El nombre del asentamiento  # noqa: E501

        :param settlement_name: The settlement_name of this AddressCompany.  # noqa: E501
        :type: str
        """

        self._settlement_name = settlement_name

    @property
    def state(self):
        """Gets the state of this AddressCompany.  # noqa: E501

        El estado  # noqa: E501

        :return: The state of this AddressCompany.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AddressCompany.

        El estado  # noqa: E501

        :param state: The state of this AddressCompany.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def street_address(self):
        """Gets the street_address of this AddressCompany.  # noqa: E501

        La calle  # noqa: E501

        :return: The street_address of this AddressCompany.  # noqa: E501
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this AddressCompany.

        La calle  # noqa: E501

        :param street_address: The street_address of this AddressCompany.  # noqa: E501
        :type: str
        """

        self._street_address = street_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddressCompany, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddressCompany):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
